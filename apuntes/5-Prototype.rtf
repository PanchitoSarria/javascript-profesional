{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fmodern\fcharset0 Courier-BoldOblique;
\f3\froman\fcharset0 Palatino-Roman;\f4\fnil\fcharset0 Monaco;\f5\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red38\green38\blue38;\red255\green255\blue255;
\red30\green45\blue55;\red30\green45\blue55;\red212\green212\blue212;\red0\green0\blue0;\red254\green224\blue226;
\red12\green99\blue153;\red234\green234\blue234;\red135\green91\blue44;\red210\green50\blue85;\red135\green135\blue135;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;
\cssrgb\c15294\c23137\c27843;\cssrgb\c15294\c23137\c27843;\cssrgb\c86275\c86275\c86275\c49804;\csgray\c0\c0;\cssrgb\c100000\c90588\c90980;
\cssrgb\c0\c46667\c66667;\cssrgb\c93333\c93333\c93333;\cssrgb\c60392\c43137\c22745;\cssrgb\c86667\c29020\c40784;\cssrgb\c60000\c60000\c60000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww14920\viewh9820\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa300\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Prototipo\uc0\u8232 
\f1\fs32 \cf3 \cb4 \outl0\strokewidth0 \strokec3 lenguaje basado en prototipos.
\f0\fs48 \cf2 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sl360\sa150\partightenfactor0

\b0\fs32 \cf5 \uc0\u8232 En Javascript todo son objetos, no tenemos clases, no tenemos ese plano para crear objetos.\
Todos los objetos \'93heredan\'94 de un prototipo que a su vez hereda de otro prototipo y as\'ed sucesivamente creando lo que se llama la\'a0
\b prototype chain
\b0 .\
La keyword\'a0
\i new
\i0 \'a0crea un nuevo objeto que \'93hereda\'94 todas las propiedades del prototype de otro objeto. No confundir prototype con\'a0
\b proto
\b0 \'a0que es s\'f3lo una propiedad en cada instanc\'eda que apunta al prototipo del que hereda.\
\pard\pardeftab720\sl360\partightenfactor0

\b \cf6 \cb4 \outl0\strokewidth0 \strokec6 Richard B. Kaufman L\'f3pez\
\
\pard\pardeftab720\sl360\partightenfactor0

\fs48 \cf3 \strokec3 MDN\uc0\u8232 
\b0\fs32 \
 Los m\'e9todos y propiedades son definidas en la propiedad\'a0\cb7 prototype\cb4 , que 
\b reside en la funci\'f3n constructor
\b0  del objeto,
\b  no en la instancia del objeto
\b0 .\
 As\'ed pues tenemos que, en JavaScript, 
\b se establece un enlace entre la instancia del objeto y su prototipo
\b0  (este se encuentra en la propiedad\'a0\cb7 __proto__\cb4 \'a0de la instancia, que es inicializada por la propiedad\'a0\cb7 prototype\cb4 \'a0del constructor).\
\

\b Los prototipos son un mecanismo mediante el cual los objetos en JavaScript heredan caracter\'edsticas entre s\'ed.\
\

\f1\fs36 \ul Herencia Prototipal
\b0 \ulnone  => \'93Cadena de prototipos\'94
\fs32 \
Para proporcionar mecanismos de 
\i\b herencia
\i0\b0  los objetos pueden tener un\'a0
\b prototipo
\b0 \'a0(
\i\b objeto prototipo
\i0\b0 ) asociado, que 
\i\b \ul act\'faa como una plantilla
\i0\b0 \ulnone  desde la que el objeto hereda\'a0m\'e9todos y propiedades.\
Los m\'e9todos y propiedades son definidas en la 
\i propiedad
\i0 \'a0
\f2\i\b \cb7 \ul prototype
\f1\i0\b0 \cb4 \ulnone , que 
\i\b \ul RESIDE en la funci\'f3n constructor
\i0\b0 \ulnone  del objeto, 
\i\b \ul NO en la instancia del objeto
\i0\b0 \ulnone , 
\i\b el objeto tendr\'e1 acceso
\i0\b0  a una serie de m\'e9todos y propiedades que se encuentran a lo largo de la 
\i\b \ul cadena de prototipos asociada
\i0\b0 \ulnone .\
\pard\pardeftab720\sl340\partightenfactor0

\f0 \cf3 \cb8 Los m\'e9todos y propiedades no se copian de un objeto a otro en la cadena del prototipo, sino que se accede a ellos subiendo por la cadena.\
Desde ECMAScript 2015 se puede acceder indirectamente al objeto prototipo de un objeto mediante 
\i\b Object.getPrototypeOf(obj)
\i0\b0 .\
\pard\pardeftab720\sl660\sa400\partightenfactor0

\b\fs36 \cf3 \cb4 \ul \ulc3 La propiedad prototype: Donde se definen los miembros hereditarios
\b0\fs32 \cb8 \ulnone \
\pard\pardeftab720\sl340\partightenfactor0

\b\fs36 \cf3 \cb9 Importante
\b0 : La propiedad\'a0\cb7 prototype\'a0\cb9 es una de las partes m\'e1s confusamente nombradas de JavaScript - podr\'eda pensarse que\'a0\cb7 this\'a0\cb9 apunta al objeto prototipo del objeto actual, pero no lo hace (es un objeto interno al que puede accederse mediante\'a0\cb7 __proto__\cb9 , \'bfrecuerda?). en su lugar,\'a0\cb7 prototype\'a0\cb9 es una propiedad que contiene un objeto en el que se definen los miembros que se desea que se hereden.\
\cb8 \
\pard\pardeftab720\sl340\partightenfactor0

\b\fs40 \cf3 \cb4 La propiedad constructor
\f3\fs56 \uc0\u8232 
\f0\b0\fs32 Cada funci\'f3n de constructor tiene una propiedad\'a0\cb7 prototype\cb4 \'a0cuyo valor es un objeto que contiene una propiedad\'a0\cb7 constructor\cb4 . Esta propiedad\'a0\cb7 constructor\'a0\cb4 apunta a la funci\'f3n constructor original.\cf5 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sl360\sa150\partightenfactor0
\cf5 \
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf10 \cb11 \outl0\strokewidth0 \strokec10 let\cf3 \strokec3  person3 \cf12 \strokec12 =\cf3 \strokec3  \cf10 \strokec10 new\cf3 \strokec3  \cf13 \strokec13 person1\cf14 \strokec14 .\cf13 \strokec13 constructor(par\'e1metros\'85)\cf3 \strokec3 \
\pard\pardeftab720\sl360\sa150\partightenfactor0

\f0 \cf5 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf3 \cb4 \outl0\strokewidth0 \strokec3 El\'a0constructor es una funci\'f3n, por lo que puede ser invocada usando par\'e9ntesis; solamente se necesita incluir la palabra clave\'a0
\f5 \cb7 new
\f1 \cb4 \'a0para especificar que se quiere usar la funci\'f3n como un constructor.
\f0 \cf5 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sl360\sa150\partightenfactor0
\cf5 \
}